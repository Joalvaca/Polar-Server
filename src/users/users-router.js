const path = require("path");
const express = require("express");
const xss = require("xss");
const UsersService = require("./users-service");

const usersRouter = express.Router();

const serializeUser = user => ({
  id: user.id,
  first_name: xss(user.fullname),
  last_name: xss(user.username),
  date_created: user.date_created,
  date_modified: user.date_modified
});

// id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
// user_email TEXT NOT NULL,
// first_name TEXT NOT NULL,
// last_name TEXT NOT NULL,
// password TEXT NOT NULL,
// date_created TIMESTAMP NOT NULL DEFAULT now
// (),
// date_modified TIMESTAMP
// );

usersRouter
  .route("/")
  .get((req, res, next) => {
    const knexInstance = req.app.get("db");
    UsersService.getAllUsers(knexInstance)
      .then(users => {
        res.json(users.map(serializeUser));
      })
      .catch(next);
  })
  .post((req, res, next) => {
    const { first_name, last_name, user_email, password } = req.body;
    const newUser = { first_name, last_name, user_email, password };

    for (const [key, value] of Object.entries(newUser)) {
      if (value == null) {
        return res.status(400).json({
          error: { message: `Missing '${key}' in request body` }
        });
      }
    }

    newUser.user_email = user_email;
    newUser.password = password;

    UsersService.insertUser(req.app.get("db"), newUser)
      .then(user => {
        res
          .status(201)
          .location(path.posix.join(req.originalUrl, `/${user.id}`))
          .json(serializeUser(user));
      })
      .catch(next);
  });

usersRouter
  .route("/:user_id")
  .all((req, res, next) => {
    UsersService.getById(req.app.get("db"), req.params.user_id)
      .then(user => {
        if (!user) {
          return res.status(404).json({
            error: { message: `User doesn't exist` }
          });
        }
        res.user = user;
        next();
      })
      .catch(next);
  })
  .get((req, res, next) => {
    res.json(serializeUser(res.user));
  })
  .delete((req, res, next) => {
    UsersService.deleteUser(req.app.get("db"), req.params.user_id)
      .then(numRowsAffected => {
        res.status(204).end();
      })
      .catch(next);
  })
  .patch((req, res, next) => {
    const { first_name, last_name, user_email, password } = req.body;
    const userToUpdate = { first_name, last_name, user_email, password };

    const numberOfValues = Object.values(userToUpdate).filter(Boolean).length;
    if (numberOfValues === 0)
      return res.status(400).json({
        error: {
          message: `Request body must contain either 'user_email','first_name', 'last_name', 'password'`
        }
      });

    UsersService.updateUser(req.app.get("db"), req.params.user_id, userToUpdate)
      .then(numRowsAffected => {
        res.status(204).end();
      })
      .catch(next);
  });

module.exports = usersRouter;
